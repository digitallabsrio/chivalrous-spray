{
  "course_name": "Python Concurrency for Senior Engineering Interviews - Learn Interactively",
  "course_overview": "Concurrency in Python is one of the most complex and advanced topics brought up during senior engineering interviews. Knowledge of concurrency and multithreading can put interviewees at a considerable advantage. This course lays the foundations of advanced concurrency and multithreading and explains concepts such as Monitors, Event Loops and Deferred Callbacks in depth. It also builds simple and complete solutions to popular concurrency problems that can be asked about in interviews like the Reader-Writer Problem and the Dining Philosopher Problem. While prior knowledge of concurrency is not required to follow through with this course, familiarity with the very basic Python would be helpful.",
  "course_folder": "python concurrency for senior engineering interviews",
  "course_lessons": [
    "0-introduction",
    "1-program vs process vs thread",
    "2-concurrency vs parallelism",
    "3-cooperative vs preemptive multitasking",
    "4-throughput vs latency",
    "5-synchronous vs asynchronous",
    "6-i o bound vs cpu bound",
    "7-thread safety",
    "8-critical section race conditions",
    "9-deadlock liveness reentrant locks",
    "10-mutex vs semaphore",
    "11-mutex vs monitor",
    "12-mesa vs hoare monitors",
    "13-semaphore vs monitor",
    "14-global interpreter lock",
    "15-continued",
    "16-amdahl s law",
    "17-moore s law",
    "18-creating threads",
    "19-subclassing thread",
    "20-daemon thread",
    "21-lock",
    "22-rlock",
    "23-condition variables",
    "24-continued",
    "25-continued",
    "26-continued",
    "27-semaphores",
    "28-events",
    "29-timer",
    "30-barrier",
    "31-with",
    "32-quiz 1",
    "33-quiz 2",
    "34-introduction",
    "35-process",
    "36-fork",
    "37-spawn",
    "38-forkserver",
    "39-queues pipes",
    "40-sharing state",
    "41-locks reentrant lock",
    "42-barrier semaphore condition variable",
    "43-pool",
    "44-continued",
    "45-manager",
    "46-continued",
    "47-continued",
    "48-syncmanager",
    "49-working with managers",
    "50-namespace",
    "51-quiz 1",
    "52-quiz 2",
    "53-quiz 3",
    "54-pool executors",
    "55-futures",
    "56-miscellaneous functions",
    "57-introduction",
    "58-iterables",
    "59-yield",
    "60-generator",
    "61-send",
    "62-sending and receiving",
    "63-continued",
    "64-coroutine",
    "65-continued",
    "66-event loop",
    "67-continued",
    "68-yield from",
    "69-continued",
    "70-generator based coroutines",
    "71-continued",
    "72-native coroutines",
    "73-continued",
    "74-mixing native generator based coroutines",
    "75-chaining coroutines",
    "76-future tasks",
    "77-web crawler example",
    "78-async sleep problem",
    "79-chat server example",
    "80-continued",
    "81-continued",
    "82-quiz",
    "83-introduction",
    "84-single thread",
    "85-multiple threads",
    "86-multiple processors",
    "87-asynchronous",
    "88-asynchronous with executors",
    "89-blocking queue bounded buffer consumer producer",
    "90-non blocking queue",
    "91-rate limiting using token bucket filter",
    "92-continued",
    "93-thread safe deferred callback",
    "94-implementing semaphore",
    "95-read write lock",
    "96-unisex bathroom problem",
    "97-implementing a barrier",
    "98-uber ride problem",
    "99-dining philosophers",
    "100-barber shop",
    "101-asynchronous to synchronous problem",
    "102-multithreaded merge sort",
    "103-epilogue"
  ],
  "repo_name": "chivalrous-spray"
}
