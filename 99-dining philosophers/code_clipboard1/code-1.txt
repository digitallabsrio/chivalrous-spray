from threading import Thread
from threading import Semaphore
import random
import time


class DiningPhilosopherProblem:

    def __init__(self):
        self.forks = [None] * 5
        self.forks[0] = Semaphore(1)
        self.forks[1] = Semaphore(1)
        self.forks[2] = Semaphore(1)
        self.forks[3] = Semaphore(1)
        self.forks[4] = Semaphore(1)
        self.exit = False

    def life_cycle_of_a_philosopher(self, id):
        while self.exit is False:
            self.contemplate()
            self.eat(id)

    def contemplate(self):
        sleep_for = random.randint(800, 1200) / 1000
        time.sleep(sleep_for)

    def acquire_forks_for_right_handed_philosopher(self, id):
        self.forks[id].acquire()
        self.forks[(id + 1) % 5].acquire()

    def acquire_forks_for_left_handed_philosopher(self, id):
        self.forks[(id + 1) % 5].acquire()
        self.forks[id].acquire()

    def eat(self, id):

        # We randomly selected the philosopher with
        # id 3 as left-handed. All others must be
        # right-handed to avoid a deadlock.
        if id is 3:
            self.acquire_forks_for_left_handed_philosopher(3)
        else:
            self.acquire_forks_for_right_handed_philosopher(id)

        # eat to your heart's content
        print("Philosopher {0} is eating".format(id))

        # release forks for others to use
        self.forks[id].release()
        self.forks[(id + 1) % 5].release()


if __name__ == "__main__":

    problem = DiningPhilosopherProblem()

    philosophers = list()

    for id in range(0, 5):
        philosophers.append(Thread(target=problem.life_cycle_of_a_philosopher, args=(id,)))

    for philosopher in philosophers:
        philosopher.start()

    time.sleep(6)
    problem.exit = True

    for philosopher in philosophers:
        philosopher.join()